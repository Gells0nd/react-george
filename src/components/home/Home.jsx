import { Button, ColorPicker, Modal } from 'antd';
import React, { useState } from 'react';
import Login from '../Login';
import Register from '../Register';
import styles from './Home.module.css';

const Home = () => {
	const [status, setStatus] = useState(false);
	const [color, setColor] = useState('#333');

	const handleColorChange = newColor => {
		const hexColor = newColor.toHexString();
		setColor(hexColor);
	};

	const changeStatus = () => {
		setStatus(true);
		Modal.destroyAll();
	};

	const log = () => {
		Modal.confirm({
			title: 'Вход в Личный Кабинет',
			content: (
				<div style={{ marginLeft: -35 }}>
					<Login changeStatus={changeStatus} />
				</div>
			),
			footer: (_, { OkBtn, CancelBtn }) => <></>,
		});
	};

	const reg = () => {
		Modal.confirm({
			title: 'Регистрация',
			content: (
				<div style={{ marginLeft: -35 }}>
					<Register />
				</div>
			),
			footer: (_, { OkBtn, CancelBtn }) => <></>,
		});
	};

	return (
		<main>
			<header className={styles.header}>
				<div className={styles.wrapper}>
					<div className={styles.logoBlock}>
						<h1
							onClick={() => console.log(status)}
							style={{ color: color }}
							className={styles.logo}
						>
							George
						</h1>
						<ColorPicker
							style={{ marginBottom: -7 }}
							value={color}
							onChange={handleColorChange}
							showText
						/>
					</div>
					<ul className={styles.nav}>
						<li className={styles.navItem}>
							<Button onClick={log}>Авторизация</Button>
						</li>
						<li className={styles.navItem}>
							<Button onClick={reg}>Регистрация</Button>
						</li>
					</ul>
				</div>
			</header>
			{status && (
				<section className={styles.wiki}>
					<h1 style={{ marginBottom: 20 }}>
						Нормальная форма в реляционной модели данных
					</h1>
					<p style={{ marginBottom: 10 }}>
						Нормальная форма — свойство отношения в реляционной модели данных,
						характеризующее его с точки зрения избыточности, потенциально
						приводящей к логически ошибочным результатам выборки или изменения
						данных. Нормальная форма определяется как совокупность требований,
						которым должно удовлетворять отношение.
					</p>
					<p style={{ marginBottom: 10 }}>
						Процесс преобразования отношений базы данных к виду, отвечающему
						нормальным формам, называется нормализацией. Нормализация
						предназначена для приведения структуры БД к виду, обеспечивающему
						минимальную логическую избыточность, и не имеет целью уменьшение или
						увеличение производительности работы или же уменьшение или
						увеличение физического объёма базы данных. Конечной целью
						нормализации является уменьшение потенциальной противоречивости
						хранимой в базе данных информации. Как отмечает К. Дейт, общее
						назначение процесса нормализации заключается в следующем:
					</p>
					<ol style={{ marginLeft: 20, marginBottom: 20 }}>
						<li style={{ marginBottom: 10 }}>
							Исключение некоторых типов избыточности;
						</li>
						<li style={{ marginBottom: 10 }}>
							Устранение некоторых аномалий обновления;
						</li>
						<li style={{ marginBottom: 10 }}>
							Разработка проекта базы данных, который является достаточно
							«качественным» представлением реального мира, интуитивно понятен и
							может служить хорошей основой для последующего расширения;
						</li>
						<li style={{ marginBottom: 10 }}>
							Упрощение процедуры применения необходимых ограничений
							целостности.
						</li>
					</ol>
					<p style={{ marginBottom: 10 }}>
						Устранение избыточности производится, как правило, за счёт
						декомпозиции отношений таким образом, чтобы в каждом отношении
						хранились только первичные факты (то есть факты, не выводимые из
						других хранимых фактов).
					</p>
					<h2 style={{ marginBottom: 20 }}>
						Роль нормализации в проектировании реляционных баз данных
					</h2>
					<p style={{ marginBottom: 10 }}>
						При том, что идеи нормализации весьма полезны для проектирования баз
						данных, они отнюдь не являются универсальным или исчерпывающим
						средством повышения качества проекта БД. Это связано с тем, что
						существует слишком большое разнообразие возможных ошибок и
						недостатков в структуре БД, которые нормализацией не устраняются.
						Несмотря на эти рассуждения, теория нормализации является очень
						ценным достижением реляционной теории и практики, поскольку она даёт
						научно строгие и обоснованные критерии качества проекта БД и
						формальные методы для усовершенствования этого качества. Этим теория
						нормализации резко выделяется на фоне чисто эмпирических подходов к
						проектированию[3], которые предлагаются в других моделях данных.
						Более того, можно утверждать, что во всей сфере информационных
						технологий практически отсутствуют методы оценки и улучшения
						проектных решений, сопоставимые с теорией нормализации реляционных
						баз данных по уровню формальной строгости.
					</p>
					<p style={{ marginBottom: 10 }}>
						Нормализацию иногда упрекают на том основании, что «это просто
						здравый смысл», а любой компетентный профессионал и сам
						«естественным образом» спроектирует полностью нормализованную БД без
						необходимости применять теорию зависимостей[4]. Однако, как
						указывает Кристофер Дейт, нормализация в точности и является теми
						принципами здравого смысла, которыми руководствуется в своём
						сознании зрелый проектировщик, то есть принципы нормализации — это
						формализованный здравый смысл. Между тем, идентифицировать и
						формализовать принципы здравого смысла — весьма трудная задача, и
						успех в её решении является существенным достижением[4].
					</p>
					<h2 style={{ marginBottom: 20 }}>Нормальные формы</h2>
					<p style={{ marginBottom: 10 }}>
						В создании и развитии теории нормализации принимали участие многие
						учёные. Однако первые три нормальные формы и концепцию
						функциональной зависимости предложил Э. Кодд[4].
					</p>
					<ol style={{ margin: 20, padding: 10 }}>
						<li style={{ marginBottom: 10 }}>
							<strong>Первая нормальная форма (1NF)</strong>: Переменная
							отношения находится в первой нормальной форме (1НФ) тогда и только
							тогда, когда в любом допустимом значении отношения каждый его
							кортеж содержит только одно значение для каждого из атрибутов.
						</li>
						<li style={{ marginBottom: 10 }}>
							<strong>Вторая нормальная форма (2NF)</strong>: Переменная
							отношения находится во второй нормальной форме тогда и только
							тогда, когда она находится в первой нормальной форме и каждый
							неключевой атрибут неприводимо (функционально полно) зависит от её
							потенциального ключа. Функционально полная зависимость означает,
							что если потенциальный ключ является составным, то атрибут зависит
							от всего ключа и не зависит от его частей.
						</li>
						<li style={{ marginBottom: 10 }}>
							<strong>Третья нормальная форма (3NF)</strong>: Переменная
							отношения находится в третьей нормальной форме тогда и только
							тогда, когда она находится во второй нормальной форме, и
							отсутствуют транзитивные функциональные зависимости неключевых
							атрибутов от ключевых.
						</li>
						<li style={{ marginBottom: 10 }}>
							<strong>Нормальная форма Бойса — Кодда (BCNF)</strong>: Переменная
							отношения находится в нормальной форме Бойса — Кодда (иначе — в
							усиленной третьей нормальной форме) тогда и только тогда, когда
							каждая её нетривиальная и неприводимая слева функциональная
							зависимость имеет в качестве своего детерминанта некоторый
							потенциальный ключ.
						</li>
						<li style={{ marginBottom: 10 }}>
							<strong>Четвёртая нормальная форма (4NF)</strong>: Переменная
							отношения находится в четвёртой нормальной форме, если она
							находится в нормальной форме Бойса — Кодда и не содержит
							нетривиальных многозначных зависимостей.
						</li>
						<li style={{ marginBottom: 10 }}>
							<strong>Пятая нормальная форма (5NF)</strong>: Переменная
							отношения находится в пятой нормальной форме (иначе — в
							проекционно-соединительной нормальной форме) тогда и только тогда,
							когда каждая нетривиальная зависимость соединения в ней
							определяется потенциальным ключом (ключами) этого отношения.
						</li>
						<li style={{ marginBottom: 10 }}>
							<strong>Доменно-ключевая нормальная форма (DKNF)</strong>:
							Переменная отношения находится в ДКНФ тогда и только тогда, когда
							каждое наложенное на неё ограничение является логическим
							следствием ограничений доменов и ограничений ключей, наложенных на
							данную переменную отношения.
						</li>
						<li style={{ marginBottom: 10 }}>
							<strong>Шестая нормальная форма (6NF)</strong>: Переменная
							отношения находится в шестой нормальной форме тогда и только
							тогда, когда она удовлетворяет всем нетривиальным зависимостям
							соединения. Из определения следует, что переменная находится в 6НФ
							тогда и только тогда, когда она неприводима, то есть не может быть
							подвергнута дальнейшей декомпозиции без потерь. Каждая переменная
							отношения, которая находится в 6НФ, также находится и в 5НФ.
						</li>
					</ol>
					<p style={{ marginBottom: 10 }}>
						Введена К. Дейтом в его книге[2], как обобщение пятой нормальной
						формы для хронологической базы данных.
					</p>
				</section>
			)}
		</main>
	);
};

export default Home;
